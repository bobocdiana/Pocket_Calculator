
public class Postfixat_Visitor implements Visitor {

	@Override
	/**This method parses the subtree generated by the AST current node
	 * ( which is represented by parser[current] ) and calculates its
	 * postfixated form and stocks it in the AST postfixat stack.
	 * 
	 */
	public void visit(AST expression) throws SyntacticException,
			EvaluatorException {
		if (expression.parser[expression.current].equals("") == false) {
			//The following if tests if the current node represents a number or a syntactic mistake.
			if (ExpressionParser.op
					.indexOf(expression.parser[expression.current]) < 0) {
				if (ExpressionParser.op
						.indexOf(expression.parser[expression.current]
								.substring(expression.parser[expression.current]
										.length() - 1)) < 0) {
					expression.postfixat
							.push(expression.parser[expression.current]);
				} else {
					throw new SyntacticException("wrong expression");
				}
			} else if (expression.parser[expression.current].equals("(")) {
				expression.operations
						.push(expression.parser[expression.current]);
			} else if (expression.parser[expression.current].equals(")")) {
				while (expression.operations.peek().equals("(") == false) {
					expression.postfixat.push(expression.operations.pop());
					if (expression.operations.isEmpty() == true) {
						throw new SyntacticException("incorrect paranthesis");
					}
				}
				expression.operations.pop();
			} else {
				String o2, o1;
				o1 = expression.parser[expression.current];
				if (expression.parser[expression.current].equals("-")
						&& (expression.current == 0 || expression.parser[expression.current - 1]
								.equals("("))) {
					o1 = "--";
				}

				while (expression.operations.isEmpty() == false) {
					o2 = expression.operations.peek();
					if (ExpressionParser.op.indexOf(o1) == ExpressionParser.op
							.indexOf(o2) && o1.equals("^") && o2.equals("^")) {
						break;
					} else if (ExpressionParser.op.indexOf(o2) >= ExpressionParser.op
							.indexOf(o1)) {
						expression.postfixat.push(expression.operations.pop());
					} else
						break;
				}
				expression.operations.push(o1);
			}
		}

	}

}
