public class Evaluator_Visitor implements Visitor {

	@Override
	/**This method parses the subtree generated by the AST current node
	 * ( which is represented by parser[current] ) and calculates the
	 * result of the subtree and stocks it in the operators stack of the AST.
	 * 
	 */
	public void visit(AST expression) throws SyntacticException,
			EvaluatorException {
		if (ExpressionParser.op.indexOf(expression.parser[expression.current]) < 0) {
			expression.operators.push(Double
					.parseDouble(expression.parser[expression.current]));
		} else {
			if (ExpressionParser.op
					.indexOf(expression.parser[expression.current]) < 7) {
				double a, b;
				if (expression.operators.isEmpty()) {
					throw new SyntacticException("postfixated wrong");
				} else {
					b = (double) expression.operators.pop();
				}
				if (expression.operators.isEmpty()) {
					throw new SyntacticException("postfixated wrong");
				} else {
					a = expression.operators.pop();
				}

				// Calculate binar expression
				double result = 0;
				if (expression.parser[expression.current].equals("+")) {
					result = a + b;
				} else if (expression.parser[expression.current].equals("-")) {
					result = a - b;
				} else if (expression.parser[expression.current].equals("*")) {
					result = a * b;
				} else if (expression.parser[expression.current].equals("/")) {
					if (b == 0) {
						throw new EvaluatorException("division by zero");
					}
					result = a / b;
				} else if (expression.parser[expression.current].equals("^")) {
					result = Math.pow(a, b);
				}
				expression.operators.push(result);
			} else {
				double a;
				if (expression.operators.isEmpty()) {
					throw new SyntacticException("postfixated wrong");
				} else {
					a = expression.operators.pop();
				}
				// Calculate unar expression
				double result = 0;
				if (expression.parser[expression.current].equals("sin")) {
					result = Math.sin(a);
				} else if (expression.parser[expression.current].equals("cos")) {
					result = Math.cos(a);
				} else if (expression.parser[expression.current].equals("sqrt")) {
					if (a < 0) {
						throw new EvaluatorException(
								EvaluatorException.NEG_SQRT);
					} else
						result = Math.sqrt(a);
				} else if (expression.parser[expression.current].equals("log")) {
					if (a < 0) {
						throw new EvaluatorException(EvaluatorException.NEG_LOG);
					} else if (a == 0) {
						throw new EvaluatorException(
								EvaluatorException.ZERO_LOG);
					} else
						result = Math.log10(a);
				} else if (expression.parser[expression.current].equals("--")) {
					result = a * (-1);
				}
				expression.operators.push(result);
			}
		}

	}

}
